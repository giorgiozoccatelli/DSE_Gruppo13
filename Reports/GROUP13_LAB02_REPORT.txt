\documentclass{article}
\sloppy
\usepackage[english]{babel}
\usepackage[a4paper]{geometry}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{hyperref}

\title{Digital Systems Electronics Laboratory 02}
\author{Group 13\\ \\s295391 Giorgio Zoccatelli\\s294422  Lorenzo Iemmulo\\s295567 Vittorio Macrip√≤}
\date{}

\begin{document}
\maketitle
\begin{center}
	\begin{tabular}{l r}
		Due Date: & April 1, 2024 \\ 
            Delivery date: & March 31, 2024 \\
		Instructor: & Professor Guido Masera
	\end{tabular}
\end{center}

\begin{figure}[ht]
\centering 
\includegraphics[width=0.6\textwidth]{Det.jpg} 
\label{fig:Det} 
\end{figure}

\vfill % Spinge il testo verso il basso

\begin{center} % Centra il testo
Politecnico di Torino\\ Accademic Year 2023/24
\end{center}

\newpage 
\tableofcontents
\newpage

\section{Introduction}
The purpose of this laboratory activity is to implement both known elementary units already seen in the previous lab activity such as multiplexers and new units such as decoders, comparators or shifters and connect them not only to the switches but also to the 7-segment displays on the FPGA in order to obtain different types of decoders. 

\section{Controlling a 7-segment display}
\subsection{Design Entry}
The aim of the first exercise is to get familiar with the 7-segment display by implementing a decoder that takes as an input a 3-bit array and gives as an output the display of one of the four letters forming the world "HELLO" according to a given truth table. Of course with a 3-bit array we can configure up to eight different configurations so half of the arrays will return a blank display. In order to obtain this result we implement a simple design called \textit{lettere.vhd} that includes both the decoder and the pin connection to our display on the FPGA called HEX\textsubscript{0}. Notice that the convention is to assign the logical value '1' if we want to turn off a segment while we assign the logical value '0' if we want to turn on a segment.
\subsection{Functional Simulation}
In this functional simulation we impelement a testbench trying to display the entire word "HELLO" one letter at a time. Once the world has been displayed we try one of the blank configurations that will turn off the display.  
\begin{figure}[ht]
    \centering 
    \includegraphics[width=0.6\textwidth]{Tb_es1.png} 
    \caption{7-segment display testbench configurations}
    \label{fig:Tb_es1}
\end{figure}
The piece of code shown in \hyperref[fig:Tb_es1]{Figure 1} refers to the file 
\textit{lettere\_tb.vhd}.
\subsection{Synthesis}
We complete our exercise by adding the two files \textit{lettere.vhd} and \textit{lettere\_tb.vhd} to a new ModelSim project in order to synthesize our project before downloading it on the FPGA. 
\begin{figure}[ht]
    \centering 
    \includegraphics[width=1\textwidth]{wave_es1.png} 
    \caption{7-segment display wave analysis}
    \label{fig:wave_es1}
\end{figure}
In \hyperref[fig:wave_es1]{Figue 2} we can see the transision between the letter "H" and the letter "E".

\section{Multiplexing the 7-segment display output}
\subsection{Design Entry}
In this exercise the aim is to implement a circuit that displays a word chosen between "HELLO", "CELLO", "CEPPO" and "FEPPO" eventually shifting their letters. We use in part previous implemented designs including them in a single top entity to describe the entire circuit. In particular we need these components:
\begin{itemize}
    \item A 4-to-1 multiplexer used to choose one of the four world we want to display (for this purpose we allocate the switches SW\textsubscript{1-0}).
    \item A shifter driven by the switches SW\textsubscript{4-2} used to decide if we want to shift the word.
    \item A 7-segment decoder to actually see the word displayed for which we need the displays HEX\textsubscript{4-1}.
\end{itemize}
All these components correspond to the files \textit{mux.vhd}, \textit{shifter.vhd} and \textit{display.vhd} which are then declared and connected in the top entity design called \textit{mux\_shifter\_design}. We don't spend much words about the single designs because they're almost all a natural extension of the previous exercises, while we point out that in the top entity we declare two internal 15-bit wide signals \textit{a1} and \textit{a2} to connect the three designs: the signal \textit{a1} will be the output of the multiplexer and the input of the shifter as well as the signal \textit{a2} will be the output of the shfiter and the input of the display. 
\subsection{Functional Simulation}
In the functional simulation \textit{mux\_shifter\_decoder.vhd} we want to implement the testbench of four different words configurations in \hyperref[fig:Tb_es2]{Figure 3}.
\begin{figure}[ht]
    \centering 
    \includegraphics[width=0.7\textwidth]{Tb_es2.png} 
    \caption{Multiplexing 7-segment display testbench configurations}
    \label{fig:Tb_es2}
\end{figure}
We implement four different words with four different shift to cover most of the possible configurations.
\subsection{Synthesis}
In the final part of the simulation made on ModelSim, we upload as always the design files as well as the testbench and we look at the wave analyzer to check if the output is correct.
\begin{figure}[ht]
    \centering 
    \includegraphics[width=1\textwidth]{wave_es2.png} 
    \caption{Multiplexing 7-segment display wave analysis}
    \label{fig:wave_es2}
\end{figure}
In \hyperref[fig:wave_es2]{Figure 4} we can notice the transition between the word "ELLOH" and the word "PPOCE". We are now ready to download our design on the FPGA. 

\section{Binary to decimal converter}
\subsection{Design Entry}
We start by defining the top-level entity, called \textit{converter\_display.vhd}. The architecture of this entity is composed of two components, corrisponding to the file \textit{converter.vhd} and the \textit{display.vhd}, which have different functions.
\\
The converter takes as input the 4-bit number, expressed by the four switches SW\textsubscript{3-0} and converts it by defining \textit{z} and \textit{m}, respectively the first and second digit of the number expressed in decimal.
\\
By the fact the 4-bit input number has $2^4-1 = 15$ as maximum number in decimal unit, it is correct to represent \textit{z} only as '0' or '1', so in order to compose the code, it is sufficient to only control if the value of the number is more than 9 to have $z = 1$ or less to have $z = 0$ (see \hyperref[fig:design_lab2_es3]{Figure 5}). 
\begin{figure}[ht]
    \centering
    \includegraphics[width=0.7\linewidth]{design_lab2_es3.png}
    \caption{Binary to Decimal converter design description}
    \label{fig:design_lab2_es3}
\end{figure}
In the second part of the circuit the display takes as input \textit{z} and \textit{m} and gives us as output respectively the HEX\textsubscript{1} and HEX\textsubscript{0} display. The way this works is exactly the same as for the first two exercizes.
\subsection{Functional Simulation}
In order to test the design, the testbench (called \textit{converter\_display\_tb}) is created. Here we assign signals to SW\_tb and we test the some of the possible configuration (the chosen ones can be seen in \hyperref[fig:tb_lab2_es3]{Figure 6})
\begin{figure}[ht]
    \centering
    \includegraphics[width=0.4\linewidth]{tb_lab2_es3.png}
    \caption{Binary to Decimal converter testbench configurations}
    \label{fig:tb_lab2_es3}
\end{figure}
\subsection{Synthesis}
Finally the signals used in the testbench are analysed using ModelSim. Following the procedure also used for the previous exercises, we can verify the correctness of the testbench and the signals, and we get the \hyperref[fig:waveform_lab2_es3]{Figure 7}, where in this case the configuration for the number 9 and the number 4 are verified.

\begin{figure}[h!]
    \centering
    \includegraphics[width=0.7\linewidth]{waveform_lab2_es3.png}
    \caption{Binary to Decimal converter wave analysis}
    \label{fig:waveform_lab2_es3}
\end{figure}

\section{Binary-to-BCD converter}
\subsection{Design Entry}
Similarly to the previous excercise, the description of a top-level design is created through the use of two different components:
\begin{itemize}
\item A binary-to-BCD converter
\item A display
\end{itemize} 
The first, described in \textit{converter2.vhd}, has the task of converting the 6-bit binary number (input) in the respective decimal number (output) using the  BCD (Binary Coded Decimal) representation that allows to obtain a decimal number from the combination of 4-bit binary representations. 
\\Before realizing the actual design of the converter, we have to make some considerations.\\ A 6-bit binary number, has at most 2\textsuperscript{6}-1 representations, meaning that the maximum decimal value is 63. This also means that the first digit driven by the signal \textit{z} that appears on the HEX\textsubscript{1} display varies from 0 to 6, while the second, that appears on the HEX\textsubscript{0} display driven by the signal \textit{m} can vary from 0 up to 9.\\ To implement this, multiple comparators are used to divide different cases on the basis of the value of the tens digit represented by \textit{z} and then determining the value of ones digit driven by \textit{m} in the following way: 
\begin{figure}[ht]
    \centering 
    \includegraphics[width=0.8\textwidth]{design_lab2_es4.PNG} 
    \caption{Binary-to-BCD converter design description}
    \label{fig:design_lab2_es4}
\end{figure}
\\For the description of the display design we use a natural extension of the code \textit{display.vhd} used in excercise 2 that performs the same function (we call the updated design \textit{display2.vhd}). 
\subsection{Functional Simulation}
To test the correct functioning of the design, a testbech called \textit{converter2\_display\_tb.vhd} is created, in which 6-bit test values are assigned to SW\_tb. The following configurations are chosen to cover almost all possible eventualities.
\begin{figure}[!h]
    \centering     \includegraphics[width=0.4\textwidth]{tb_lab2_es4.PNG} 
    \caption{Binary-to-BCD converter testbench configurations}
    \label{fig:testbench_es4}
\end{figure}
\\As it can be seen from the \hyperref[fig:testbench_es4]{Figure 9}, the test signals also verify the functioning of the blank display, in addition to the most classic numerical configurations.

\newpage
\subsection{Synthesis}
SW\_tb signals are then analysed using ModelSim. The correct functioning of the implementation is verified by the evolution of the logical signals, as shown in \hyperref[fig:waveform_es4]{Figure 10} below. The first output signal does in fact represent the number 63 by printing 6 on HEX\textsubscript{1} and 3 on HEX\textsubscript{0}, while the second configuration is verified to be blank.\\   
Every 20 ns a configuration change is made with a consequent change in the trend of the logical waves, but always in accordance with the expected results. 
\begin{figure}[ht]
    \centering 
    \includegraphics[width=1\textwidth]{waveform_es4_lab2.png} 
    \caption{Binary-to-BCD converter wave analysis}
    \label{fig:waveform_es4}
\end{figure}
\\In the same Figure we can also see the transition between the "63" configuration and the "blank" configuration reported in the previous section.
\end{document}
